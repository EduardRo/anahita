{"version":3,"sources":["components/navbar/navbar.jsx","pages/HomePage/home.page.jsx","components/testcategory/testCategory.jsx","components/tests/tests.jsx","pages/TestsPage/tests.page.jsx","pages/ResultsPage/results.page.jsx","components/question/question.jsx","components/answer/answer.jsx","tests/TADDNUM0/TADDNUM001.jsx","tests/TOPPMULT0/TOPPMULT0.jsx","components/test/test.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBarComponent","Container","Navbar","expand","className","Brand","href","Toggle","aria-controls","Collapse","Nav","NavLink","src","width","alt","Home","Component","TestCategory","props","to","path","title","Tests","state","testcategory","id","ButtonGroup","vertical","this","map","index","key","React","TestsPage","Results","Question","Jumbotron","style","st","Answer","Button","onClick","noBtn","TADDNUM001","questions","answers","stadiu","now","progressbar","handleAnswer","bind","interval","setInterval","setState","console","log","answer","question","ProgressBar","animated","variant","margin","textAlign","length","background","color","marginBottom","fontSize","anwsernumber","TOPPMULT0","Test","match","params","component","Comp","TESTS","selectedComponent","App","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5d7bf6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Container, NavLink, Nav } from 'react-bootstrap';\r\nimport './navbar.scss';\r\n\r\nconst NavBarComponent = () => {\r\n  return (\r\n    <Container>\r\n      <Navbar expand='lg' className='navbar'>\r\n        <Navbar.Brand href='/'>Anahita</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n        <Navbar.Collapse>\r\n          <Nav className='mr-auto'>\r\n            <NavLink href='/tests'>TESTS</NavLink>\r\n            <NavLink href='/results'>RESULTS</NavLink>\r\n            <NavLink href='/login'>LOGIN</NavLink>\r\n            <NavLink href='/settings'>SETTINGS</NavLink>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n        <Navbar.Brand>\r\n          Georgiana{' '}\r\n          <img src='avatar.png' width='50' alt='' className='img'></img>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default NavBarComponent;\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <div>Login</div>\r\n\r\n        <div>Test</div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport './testCategory.scss';\r\nconst TestCategory = (props) => {\r\n  return (\r\n    <div>\r\n      <Link\r\n        to={props.path}\r\n        className='justify-content-md-center btn btn-primary'\r\n      >\r\n        {props.title}\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\nexport default TestCategory;\r\n","import React from 'react';\r\n\r\nimport TestCategory from '../testcategory/testCategory';\r\nimport { ButtonGroup } from 'react-bootstrap';\r\n\r\nclass Tests extends React.Component {\r\n  state = {\r\n    testcategory: [\r\n      { id: 'ADDNUM001', title: 'Adunari', path: '/test/ADDNUM001' },\r\n      { id: 'OPNUM002', title: 'Scaderi', path: '/test/OPNUM002' },\r\n      { id: 'OPNUM001', title: 'Inmultiri', path: '/test/OPNUM003' },\r\n      {\r\n        id: 'OPPMULT0',\r\n        title: 'Operatii cu multimi',\r\n        path: '/test/OPPMULT0',\r\n      },\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ButtonGroup vertical className='mb-3'>\r\n          {this.state.testcategory.map((testcategory, index) => {\r\n            return (\r\n              <TestCategory\r\n                key={index}\r\n                title={testcategory.title}\r\n                path={testcategory.path}\r\n              />\r\n            );\r\n          })}\r\n        </ButtonGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tests;\r\n","import React, { Component } from 'react';\r\nimport Tests from '../../components/tests/tests';\r\n\r\nclass TestsPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Tests />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestsPage;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Results extends Component {\r\n  render() {\r\n    return <div>Results</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nconst Question = (props) => {\r\n  return (\r\n    <Jumbotron style={props.st}>\r\n      <div>{props.title}</div>\r\n    </Jumbotron>\r\n  );\r\n};\r\nexport default Question;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport './answer.scss';\r\n\r\nconst Answer = (props) => {\r\n  //console.log(props);\r\n  return (\r\n    <Button\r\n      className='btn btn-primary btn-block\"'\r\n      onClick={() => props.onClick(props.noBtn)}\r\n      id={props.noBtn}\r\n    >\r\n      {props.title}\r\n    </Button>\r\n  );\r\n};\r\nexport default Answer;\r\n","import React, { Component } from 'react';\r\nimport { ButtonGroup, Container } from 'react-bootstrap';\r\nimport Question from '../../components/question/question';\r\nimport Answer from '../../components/answer/answer';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\nclass TADDNUM001 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: [\r\n        [2, '+', 3, 5, 4, 3],\r\n        [7, '-', 5, 2, 3, 1],\r\n        [8, '-', 2, 6, 7, 4],\r\n        [9, '+', 3, 6, 12, 10],\r\n        [5, '-', 2, 7, 3, 2],\r\n      ],\r\n      answers: [],\r\n      stadiu: 0,\r\n      now: 0,\r\n      progressbar: true,\r\n    };\r\n\r\n    this.handleAnswer = this.handleAnswer.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.stadiu < 4) {\r\n      this.interval = setInterval(() => {\r\n        this.setState({\r\n          now: this.state.now + 1,\r\n        });\r\n      }, 100);\r\n\r\n      this.interval = setInterval(() => {\r\n        this.setState({ stadiu: this.state.stadiu + 1, now: 0 });\r\n        if (this.state.stadiu > 4) {\r\n          this.setState({ progressbar: false });\r\n        }\r\n      }, 11000);\r\n    } else {\r\n      this.setState({ progressbar: false });\r\n    }\r\n    console.log('stadiu: ' + this.state.stadiu);\r\n  }\r\n\r\n  handleAnswer(answer, question) {\r\n    this.setState({ now: 0 });\r\n    if (this.state.stadiu < 4) {\r\n      this.setState({ stadiu: this.state.stadiu + 1 });\r\n\r\n      this.setState({ answers: [...this.state.answers, question] }, () => {\r\n        console.log(this.state.answers);\r\n      });\r\n\r\n      //console.log('answer: ' + answer);\r\n\r\n      console.log(this.state.answers);\r\n    } else {\r\n      this.setState({ answers: [...this.state.answers, question] }, () => {\r\n        console.log(this.state.answers);\r\n      });\r\n      this.setState({ progressbar: false });\r\n      //console.log('finish');\r\n      //console.log(this.state.answers);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const st = {\r\n      background: 'black',\r\n      color: 'white',\r\n      width: '400px',\r\n      marginBottom: '0px',\r\n      fontSize: '1.2rem',\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          {this.state.progressbar ? (\r\n            <ProgressBar\r\n              animated\r\n              variant='danger'\r\n              now={this.state.now}\r\n              style={{ margin: '10px', textAlign: 'center' }}\r\n            />\r\n          ) : (\r\n            ''\r\n          )}\r\n        </Container>\r\n        {this.state.answers.length < 5 ? (\r\n          <ButtonGroup vertical>\r\n            {this.state.questions[this.state.stadiu] ? (\r\n              <Question\r\n                st={st}\r\n                title={this.state.questions[this.state.stadiu].map(\r\n                  (question, index) => {\r\n                    if (index < 3) {\r\n                      return question;\r\n                    } else return '';\r\n                  }\r\n                )}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n            {this.state.questions[this.state.stadiu]\r\n              ? this.state.questions[this.state.stadiu].map(\r\n                  (question, index) => {\r\n                    if (index > 2) {\r\n                      return (\r\n                        <Answer\r\n                          key={index}\r\n                          title={question}\r\n                          noBtn={index - 2}\r\n                          anwsernumber={index}\r\n                          onClick={(answer) =>\r\n                            this.handleAnswer(answer, question)\r\n                          }\r\n                        />\r\n                      );\r\n                    } else return '';\r\n                  }\r\n                )\r\n              : ''}\r\n          </ButtonGroup>\r\n        ) : (\r\n          <div> {this.state.answers}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TADDNUM001;\r\n","import React from 'react';\r\nimport { ButtonGroup } from 'react-bootstrap';\r\nimport Question from '../../components/question/question';\r\nimport Answer from '../../components/answer/answer';\r\n\r\nclass TOPPMULT0 extends React.Component {\r\n  render() {\r\n    const st = {\r\n      background: 'black',\r\n      color: 'white',\r\n      width: '400px',\r\n      marginBottom: '0px',\r\n      fontSize: '1.2rem',\r\n    };\r\n    return (\r\n      <div>\r\n        <h1>TOPPMULT0</h1>\r\n        <ButtonGroup vertical>\r\n          <Question st={st} />\r\n          <Answer />\r\n          <Answer />\r\n          <Answer />\r\n        </ButtonGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TOPPMULT0;\r\n","import React from 'react';\r\nimport * as TESTS from '../../tests/indexteste';\r\n\r\nconst Test = (props) => {\r\n  console.log(props);\r\n  let id = props.match.params.id;\r\n\r\n  //console.log(id);\r\n  function selectedComponent(id) {\r\n    let component = 'T' + id;\r\n    const Comp = TESTS[component];\r\n    console.log(component);\r\n    //console.log(id);\r\n    return <Comp />;\r\n  }\r\n  return <div>{selectedComponent(id)}</div>;\r\n};\r\nexport default Test;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport NavBarComponent from './components/navbar/navbar';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from '../src/pages/HomePage/home.page';\r\nimport Tests from '../src/pages/TestsPage/tests.page';\r\nimport Results from '../src/pages/ResultsPage/results.page';\r\nimport Test from '../src/components/test/test';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <header className='App-header'>\r\n          <NavBarComponent />\r\n        </header>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route exact path='/tests' component={Tests} />\r\n            <Route path='/test/:id' component={Test} />\r\n            <Route exact path='/results' component={Results} />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}